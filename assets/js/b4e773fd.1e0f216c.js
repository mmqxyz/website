"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[1114],{3905:function(e,t,o){o.d(t,{Zo:function(){return f},kt:function(){return h}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},f=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=s(o),c=n,h=u["".concat(p,".").concat(c)]||u[c]||m[c]||a;return o?r.createElement(h,i(i({ref:t},f),{},{components:o})):r.createElement(h,i({ref:t},f))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<a;s++)i[s]=o[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}c.displayName="MDXCreateElement"},3958:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s}});var r=o(3117),n=(o(7294),o(3905));const a={sidebar_position:3,title:"Proofs"},i="Semaphore proofs",l={unversionedId:"guides/proofs",id:"version-V3/guides/proofs",title:"Proofs",description:"Once a user joins their Semaphore identity to a Semaphore group, the user can signal anonymously with a zero-knowledge proof that proves the following:",source:"@site/versioned_docs/version-V3/guides/proofs.md",sourceDirName:"guides",slug:"/guides/proofs",permalink:"/docs/guides/proofs",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/proofs.md",tags:[],version:"V3",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Proofs"},sidebar:"version-V3/mySidebar",previous:{title:"Groups",permalink:"/docs/guides/groups"},next:{title:"Circuits",permalink:"/docs/technical-reference/circuits"}},p={},s=[{value:"Generate a proof off-chain",id:"generate-a-proof-off-chain",level:2},{value:"Verify a proof off-chain",id:"verify-a-proof-off-chain",level:2},{value:"Verify a proof on-chain",id:"verify-a-proof-on-chain",level:2}],f={toc:s};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},f,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"semaphore-proofs"},"Semaphore proofs"),(0,n.kt)("p",null,"Once a user joins their ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"Semaphore identity")," to a ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"Semaphore group"),", the user can signal anonymously with a zero-knowledge proof that proves the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the user is a member of the group,"),(0,n.kt)("li",{parentName:"ul"},"the same user created the signal and the proof.")),(0,n.kt)("p",null,"Developers can use Semaphore for the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#generate-a-proof-off-chain"},(0,n.kt)("strong",{parentName:"a"},"Generate a proof off-chain"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#verify-a-proof-off-chain"},(0,n.kt)("strong",{parentName:"a"},"Verify a proof off-chain"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#verify-a-proof-on-chain"},(0,n.kt)("strong",{parentName:"a"},"Verify a proof on-chain")))),(0,n.kt)("h2",{id:"generate-a-proof-off-chain"},"Generate a proof off-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to generate an off-chain proof.\nTo generate a proof, pass the following parameters to the ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof")," function:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"identity"),": the Semaphore identity of the user broadcasting the signal and generating the proof;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"group"),": the group to which the user belongs;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": the value that prevents double-signaling;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"signal"),": the signal the user wants to send anonymously;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"snarkArtifacts"),": the ",(0,n.kt)("inlineCode",{parentName:"li"},"zkey")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"wasm")," ",(0,n.kt)("a",{parentName:"li",href:"/docs/glossary/#trusted-setup-files"},"trusted setup files"),".")),(0,n.kt)("p",null,"In the voting system use case, once all the voters have joined their ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/identities#create-an-identity"},"identities")," to the ballot ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/groups"},"group"),",\na voter can generate a proof to vote for a proposal.\nIn the call to ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof"),", the voting system passes the unique ballot ID (the ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary/#merkle-tree/"},"Merkle tree")," root of the group) as the\n",(0,n.kt)("inlineCode",{parentName:"p"},"externalNullifier")," to prevent the voter signaling more than once for the ballot.\nThe following code sample shows how to use ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof")," to generate the voting proof:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { generateProof } from "@semaphore-protocol/proof"\n\nconst externalNullifier = group.root\nconst signal = 1\n\nconst fullProof = await generateProof(identity, group, externalNullifier, signal, {\n    zkeyFilePath: "./semaphore.zkey",\n    wasmFilePath: "./semaphore.wasm"\n})\n')),(0,n.kt)("h2",{id:"verify-a-proof-off-chain"},"Verify a proof off-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to verify a Semaphore proof off-chain.\nTo verify a proof, pass the following to the ",(0,n.kt)("inlineCode",{parentName:"p"},"verifyProof")," function:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"fullProof"),": the Semaphore proof;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"treeDepth"),": the Merkle tree depth.")),(0,n.kt)("p",null,"The following code sample shows how to verify the previously generated proof:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { verifyProof } from "@semaphore-protocol/proof"\n\nawait verifyProof(fullProof, 20) // true or false.\n')),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"verifyProof")," returns a Promise that resolves to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("h2",{id:"verify-a-proof-on-chain"},"Verify a proof on-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"/docs/technical-reference/contracts#semaphoresol"},(0,n.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," contract to verify proofs on-chain."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"See our ",(0,n.kt)("a",{parentName:"p",href:"/docs/deployed-contracts"},"deployed contracts")," to find the addresses for your network.")),(0,n.kt)("p",null,"To verify Semaphore proofs in your contract, import ",(0,n.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol"),", pass it the ",(0,n.kt)("inlineCode",{parentName:"p"},"Semaphore.sol")," address and call the ",(0,n.kt)("inlineCode",{parentName:"p"},"verifyProof")," method with following parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"groupId"),": the identifier of the group;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"merkleTreeRoot"),": the root of the Merkle tree;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"signal"),": the signal the user wants to send anonymously;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"nullifierHash"),": a ",(0,n.kt)("a",{parentName:"li",href:"#retrieve-a-nullifier-hash"},"nullifier hash"),";"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": the value that prevents double-signaling;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"proof"),": a ",(0,n.kt)("a",{parentName:"li",href:"#generate-a-solidity-compatible-proof"},"Solidity-compatible Semaphore proof"),".")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"You can import ",(0,n.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol")," and other Semaphore contracts from the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/contracts"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts"))," NPM module.")))}u.isMDXComponent=!0}}]);