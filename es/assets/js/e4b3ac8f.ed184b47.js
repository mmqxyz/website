"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[4357],{3905:function(e,a,r){r.d(a,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=n.createContext({}),u=function(e){var a=n.useContext(p),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},s=function(e){var a=u(e.components);return n.createElement(p.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=t,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(f,i(i({ref:a},s),{},{components:r})):n.createElement(f,i({ref:a},s))}));function f(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l[c]="string"==typeof e?e:t,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3187:function(e,a,r){r.r(a),r.d(a,{assets:function(){return p},contentTitle:function(){return i},default:function(){return c},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var n=r(3117),t=(r(7294),r(3905));const o={sidebar_position:3,title:"Pruebas"},i="Pruebas Semaphore",l={unversionedId:"guides/proofs",id:"version-V3/guides/proofs",title:"Pruebas",description:"Una vez que un usuario liga su identidad Semaphore a un grupo Semaphore, el usuario puede emitir una se\xf1al an\xf3nima con una prueba de conocimiento cero (ZKP) que demuestre lo siguiente:",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-V3/guides/proofs.md",sourceDirName:"guides",slug:"/guides/proofs",permalink:"/es/docs/guides/proofs",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/proofs.md",tags:[],version:"V3",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Pruebas"},sidebar:"version-V3/mySidebar",previous:{title:"Grupos",permalink:"/es/docs/guides/groups"},next:{title:"Circuitos",permalink:"/es/docs/technical-reference/circuits"}},p={},u=[{value:"Generar una prueba off-chain",id:"generar-una-prueba-off-chain",level:2},{value:"Verificar una prueba off-chain",id:"verificar-una-prueba-off-chain",level:2},{value:"Verificar una prueba on-chain",id:"verificar-una-prueba-on-chain",level:2}],s={toc:u};function c(e){let{components:a,...r}=e;return(0,t.kt)("wrapper",(0,n.Z)({},s,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"pruebas-semaphore"},"Pruebas Semaphore"),(0,t.kt)("p",null,"Una vez que un usuario liga su ",(0,t.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"identidad Semaphore")," a un ",(0,t.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"grupo Semaphore"),", el usuario puede emitir una se\xf1al an\xf3nima con una prueba de conocimiento cero (ZKP) que demuestre lo siguiente:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"el usuario es un miembro del grupo,"),(0,t.kt)("li",{parentName:"ul"},"el mismo usuario creo tanto la se\xf1al como la prueba.")),(0,t.kt)("p",null,"Las y los desarrolladores pueden utilizar Semaphore para realizar las siguientes acciones:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#generate-a-proof-off-chain"},(0,t.kt)("strong",{parentName:"a"},"Generar una prueba externa a la cadena (off-chain)"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#verify-a-proof-off-chain"},(0,t.kt)("strong",{parentName:"a"},"Verificar una prueba externa a la cadena (off-chain)"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#verify-a-proof-on-chain"},(0,t.kt)("strong",{parentName:"a"},"Verificar una prueba interna a la cadena (on-chain)")))),(0,t.kt)("h2",{id:"generar-una-prueba-off-chain"},"Generar una prueba off-chain"),(0,t.kt)("p",null,"Utilice la librer\xeda ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,t.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," para generar una prueba off-chain.\nPara generar una prueba, transforme los siguientes par\xe1metros con la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"generateProof"),":"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"identity"),": la identidad Semaphore del usuario emitiendo la se\xf1al y generando la prueba;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"group"),": el grupo al cual pertenece el usuario;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": el valor que impide la emisi\xf3n de dos se\xf1ales por el mismo usuario;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"signal"),": la se\xf1al que el usuario quiere enviar de forma an\xf3nima;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"snarkArtifacts"),": la ",(0,t.kt)("inlineCode",{parentName:"li"},"zkey")," y ",(0,t.kt)("inlineCode",{parentName:"li"},"wasm")," de los ",(0,t.kt)("a",{parentName:"li",href:"/docs/glossary/#trusted-setup-files"},"archivos confiables de configuraci\xf3n"),".")),(0,t.kt)("p",null,"En el caso de uso de un sistema de votaci\xf3n, una vez que todos los votantes hayan ligado sus ",(0,t.kt)("a",{parentName:"p",href:"/docs/guides/identities#create-an-identity"},"identidades")," al ",(0,t.kt)("a",{parentName:"p",href:"/docs/guides/groups"},"grupo")," de la votaci\xf3n,\nun votante puede generar una prueba para votar por una propuesta.\nEn el llamado para ",(0,t.kt)("inlineCode",{parentName:"p"},"generateProof"),"(generar la prueba), el sistema de votaci\xf3n env\xeda el ID \xfanico de la votaci\xf3n (la ra\xedz del ",(0,t.kt)("a",{parentName:"p",href:"/docs/glossary/#merkle-tree/"},"\xe1rbol de Merkle")," del grupo) como el\n",(0,t.kt)("inlineCode",{parentName:"p"},"externalNullifier")," para impedir que el votante emita m\xe1s de una se\xf1al para esta votaci\xf3n.\nLa siguiente muestra de c\xf3digo demuestra c\xf3mo utilizar ",(0,t.kt)("inlineCode",{parentName:"p"},"generateProof")," para generar una prueba de votaci\xf3n:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},'import { generateProof } from "@semaphore-protocol/proof"\n\nconst externalNullifier = group.root\nconst signal = 1\n\nconst fullProof = await generateProof(identity, group, externalNullifier, signal, {\n    zkeyFilePath: "./semaphore.zkey",\n    wasmFilePath: "./semaphore.wasm"\n})\n')),(0,t.kt)("h2",{id:"verificar-una-prueba-off-chain"},"Verificar una prueba off-chain"),(0,t.kt)("p",null,"Utilice la librer\xeda ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,t.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," para verificar una prueba Semaphore off-chain.\nPara verificar una prueba, transforme los siguientes par\xe1metros con la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"verifyProof"),":"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"fullProof"),": la prueba Semaphore;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"treeDepth"),": la profundidad del \xe1rbol de Merkle.")),(0,t.kt)("p",null,"La siguiente muestra de c\xf3digo demuestra c\xf3mo verificar la prueba generada previamente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},'import { verifyProof } from "@semaphore-protocol/proof"\n\nawait verifyProof(fullProof, 20) // verdadero o falso.\n')),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"verifyProof")," devolver\xe1 una Promesa que determina uno de los dos valores ",(0,t.kt)("inlineCode",{parentName:"p"},"verdadero")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"falso"),"."),(0,t.kt)("h2",{id:"verificar-una-prueba-on-chain"},"Verificar una prueba on-chain"),(0,t.kt)("p",null,"Utilice el contrato ",(0,t.kt)("a",{parentName:"p",href:"/docs/technical-reference/contracts#semaphoresol"},(0,t.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," para verificar pruebas on-chain."),(0,t.kt)("admonition",{type:"info"},(0,t.kt)("p",{parentName:"admonition"},"Vea nuestros ",(0,t.kt)("a",{parentName:"p",href:"/docs/deployed-contracts"},"contratos desplegados")," para encontrar las direcciones adecuadas para su red.")),(0,t.kt)("p",null,"Para verificar las pruebas Semaphore en su contrato, importe ",(0,t.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol"),", transf\xf3rmelo a la direcci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"Semaphore.sol")," y llame el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"verifyProof")," con los siguientes par\xe1metros:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"groupId"),": el identificador del grupo;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"merkleTreeRoot"),": la ra\xedz del \xe1rbol de Merkle;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"signal"),": la se\xf1al que el usuario quiere enviar de forma an\xf3nima ;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"nullifierHash"),": un ",(0,t.kt)("a",{parentName:"li",href:"#retrieve-a-nullifier-hash"},"nullifier hash")," (hash anulador);"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": el valor que impide la emisi\xf3n de dos se\xf1ales por el mismo usuario;"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"proof"),": una ",(0,t.kt)("a",{parentName:"li",href:"#generate-a-solidity-compatible-proof"},"prueba Semaphore que es compatible con Solidity"),".")),(0,t.kt)("admonition",{type:"info"},(0,t.kt)("p",{parentName:"admonition"},"Puede importar ",(0,t.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol")," y otros contratos Semaphore del m\xf3dulo NPM ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/contracts"},(0,t.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts")),".")))}c.isMDXComponent=!0}}]);